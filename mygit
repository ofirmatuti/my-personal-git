#!/usr/bin/env bash

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BOLD='\033[1m'
NOCOLOR='\033[0m'
COMMIT_ICON=⭐ 

function _get_modified_files() {
	git ls-files . --exclude-standard --others -m | wc -l
}

function _get_staged_files() {
	git diff --name-only --cached | cat | wc -l
}

function _last_commit_message() {
	git log -1 --pretty=%B | cat | tr -d '\n' 
}

function _is_rebased() {
    LOCAL=$(git rev-parse @ > /dev/null 2>&1)
    REMOTE=$(git rev-parse origin/main  > /dev/null 2>&1)
    BASE=$(git merge-base @ origin/main  > /dev/null 2>&1)

    if [[ $BASE != $REMOTE ]]; then
        echo -e "${YELLOW}WARNING: not rebased to origin/main${NOCOLOR}" 
    fi
}

function _run() {
	msg=$(_last_commit_message)
	if [ $(_get_modified_files) != 0 ]; then
		>&2 echo -e "${YELLOW}ACTION REQUIRED: Stage non-tracked and modified files${NOCOLOR}" 
	elif [ $(_get_staged_files) != 0 ]; then
		>&2 echo -e "${YELLOW}ACTION REQUIRED: Commit staged files${NOCOLOR}"
	elif [ -f "$PWD/build.sbt" ] && [ "${msg:0:1}" != "$COMMIT_ICON" ]; then
		echo -e "${GREEN}INFO: Running Scalafix and Scalafmt..${NOCOLOR}"
		1>&/dev/null sbt "scalafixAll; scalafmtAll;"
		if [ $(_get_modified_files) != 0 ]; then
			git commit -am "$COMMIT_ICON $msg"
			echo -e "${GREEN}INFO: Linting commit has been created and tagged with the $COMMIT_ICON icon${NOCOLOR}"
		else
			echo -e "${GREEN}INFO: No changes were commited${NOCOLOR}"
		fi
	fi
}

function my_git() {
	_is_rebased
	for arg in "$@"
	do
   		if [ "$arg" = "push" ]; then
			_run
			break
		fi
	done
        git "$@"
}

(
  [[ -n $ZSH_VERSION && $ZSH_EVAL_CONTEXT =~ :file$ ]] || 
  [[ -n $KSH_VERSION && "$(cd -- "$(dirname -- "$0")" && pwd -P)/$(basename -- "$0")" != "$(cd -- "$(dirname -- "${.sh.file}")" && pwd -P)/$(basename -- "${.sh.file}")" ]] || 
  [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)
) && sourced=1 || sourced=0

if [ $sourced = 0 ]; then 
	my_git "$@"
fi
